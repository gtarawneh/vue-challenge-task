<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="main.css">
		<style>
			* {
				font-family: 'Roboto';
			}

			#app {
				max-width: 976px;
				margin: auto auto;
			}

			.table-container {
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				align-items: center;
				min-height: 10em;
				padding: 20px;

				border: 2px #a681ce solid;
			}
			.table-container.active {
				background-color: #f3e7ff;
			}

			.table-message {
				width: 100%;
				line-height: 1.7em;
				text-align: center;
			}

			.table-action {
				width: 100%;
				min-height: 2em;
				background-color: #8c59c2;
				color: white;
				border: 0;
			}

			.restaurant-container {
				display: grid;
				grid-template-columns: 1fr 1fr 1fr 1fr;
				grid-gap: 10px;
				padding: 30px;

				border: 2px red solid;
			}

			.form {
				display: flex;
				flex-direction: column;
				padding: 40px;
			}

			.form * {
				margin-top: 10px;
				margin-bottom: 10px;
			}

			.form .button {
				min-width: 7em;
				margin-left: auto;
			}
		</style>
		<title>
			Restaurant Manager
		</title>
	</head>
	<body>
		<div id="app">
			<x-restaurant ref="restaurantComponent"></x-restaurant>
			<form class="form">
				<h2>New party</h2>
				<span>Fill the following form to allocate a table to a party that is waiting to be seated.</span>
				<input class="input" type="text" placeholder="Number of people" v-model="form.occupantsNumber"/>
				<input class="input" type="text" placeholder="Duration of stay in seconds" v-model="form.duration"/>
				<input class="input" type="text" placeholder="Fuss message if evicted" v-model="form.fussMessage"/>

				<input @click="submitNewPartyForm" class="button" type="button" value="Add">
			</form>
		</div>
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
		<script>
			Vue.component('x-table', {
				props: {
					id: { type: Number, required: true },
					endTime: {type: Date, required: false},
					isOccupied: { type: Boolean, required: true },
					occupiedBy: { type: Number, required: false },
					capacity: { type: Number, required: true },
					fussMessage: { type: String, required: false },
				},
				data: function () {
					return {
						timerToDisplay: '00:00', // mm:ss
						$isAvailable: undefined, // Promise for table availability
						timer: undefined, // Refresh timer for updating timer on view
						promiseOutsideCall: undefined // You might regret it, but I did not find the right way
					}
				},
				created() {
					this.updateTimer();
				},
				beforeDestroy () {
					this.dropTimer();
				},

				methods: {
					occupy() {
						this.startTimer();
						this.$isAvailable = new Promise(resolve => {
							this.promiseOutsideCall = resolve;
						})
					},
					async untilAvailable() {
						return !this.isOccupied ? this.getDetails() : await this.$isAvailable;
					},
					evict() {
						this.freeTable();
						if (this.fussMessage) {
							alert(this.fussMessage);
						}
					},
					freeTable() {
						this.dropTimer();
						this.promiseOutsideCall();
						this.$emit('freeTable')
					},
					startTimer() {
						this.updateTimer();
						this.timer = window.setInterval(() => {
							this.updateTimer();
						}, 1000);
					},
					dropTimer () {
						clearInterval(this.timer);
						this.timerToDisplay = undefined;
					},
					updateTimer() {
						const secondsToEnd = Math.floor((this.endTime - new Date()) / 1000);

						const minutes = Math.floor(secondsToEnd / 60);
						const seconds = secondsToEnd - minutes * 60;
						// Add '0' before number, if it less than 10;
						let fancyMinutes = ('0' + minutes).slice(-2);
						let fancySeconds = ('0' + seconds).slice(-2);
						this.timerToDisplay = fancyMinutes + ':' + fancySeconds;

						if (secondsToEnd === 0) {
							this.freeTable();
						}
					},
					getDetails() {
						return {...this.$props};
					},

				},

				template: `
					<div v-if="isOccupied" class="table-container active">
						<span class="table-message">Occupied by {{occupiedBy}} <br/> (free in {{timerToDisplay}})</span>
						<button class="table-action" @click="evict()">Evict</button>
					</div>
					<div v-else class="table-container">
						<span class="table-message">Table Available <br/> (capacity = {{capacity}})</span>
					</div>`

			})

			Vue.component('x-restaurant', {
				data: function () {
					return {
						tables: [],
						default_capacities: [10, 8, 10, 6, 2, 6, 4, 12],
					}
				},
				created() {
					this.initDefaultState();
				},
				methods: {
					occupyTable(formData) {
						const preferableTable = this.tables
								.filter(table => table.capacity >= formData.occupantsNumber && table.isOccupied === false)
								.sort((a, b) => a.capacity - b.capacity)
								[0];

						if (preferableTable === undefined) {
							alert("Sorry, we don't have a table for you.");
							return;
						}
						let table = this.tables.filter(t => t.id === preferableTable.id)[0];
						table.isOccupied = true;
						table.occupiedBy = parseInt(formData.occupantsNumber);
						table.fussMessage = formData.fussMessage;
						table.endTime = this.getEndTimeForDuration(formData.duration);
						this.$refs[table.id][0].occupy();

					},
					tableBecomeAvailable(table) {
						table.isOccupied = false;
						table.occupiedBy = undefined;
						table.endTime = undefined;
					},
					save(key) {
						localStorage.setItem(key, JSON.stringify(this.tables))
					},
					load(key) {
						let loadedState = localStorage.getItem(key);
						if (!loadedState) return;
						loadedState = JSON.parse(loadedState);
						this.tables = loadedState;
					},
					async awaitTable(occupants) {
						const $tablePromises = [];
						this.tables.forEach(table => {
							if (table.capacity >= occupants) {
								$tablePromises.push(this.$refs[table.id][0].untilAvailable());
							}
						})
						return await Promise.race($tablePromises)
					},
					initDefaultState() {
						this.default_capacities.forEach((value, index) => {
							this.tables.push({
										id: index+1,
										capacity: value,
										isOccupied: false,
										occupiedBy: undefined,
										endTime: undefined,
							})
						})
					},
					getEndTimeForDuration(durationInSeconds) {
						return new Date(new Date().getTime() + durationInSeconds * 1000)
					},
				},
				template: '<div class="restaurant-container">' +
							// '<x-table :id="2" :capacity="3" :is-occupied="true" :occupied-by="5" :end-time="new Date(new Date().getTime() + 5000)"></x-table>' +
							'<x-table v-for="table in tables" ' +
								'v-bind:key="table.id" ' +
								':ref="table.id"' +
								':id="table.id" ' +
								':capacity="table.capacity" ' +
								':is-occupied="table.isOccupied" ' +
								':occupied-by="table.occupiedBy"' +
								':end-time="table.endTime"' +
								':fuss-message="table.fussMessage"' +
								'@freeTable="tableBecomeAvailable(table)">' +
							'</x-table>' +
						'</div>'
			})

			const app = new Vue({
				el: '#app',
				data: {
					form: {
						occupantsNumber: null,
						duration: null,
						fussMessage: '',
					}
				},
				methods: {
					submitNewPartyForm() {
						this.$refs.restaurantComponent.occupyTable(this.form);
						this.resetForm();
					},
					resetForm() {
						this.form = {
							occupantsNumber: null,
							duration: null,
							fussMessage: '',
						}
					},
				},
				delimiters: ['{', '}'],
			});
		</script>
	</body>
</html>
