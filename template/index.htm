<!doctype html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
		<link href="https://fonts.googleapis.com/css?family=Roboto:400,500,700&display=swap" rel="stylesheet">
		<link rel="stylesheet" href="main.css">
		<style>
			* {
				font-family: 'Roboto';
			}

			#app {
				max-width: 976px;
				margin: auto auto;
			}

			.table-container {
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				align-items: center;
				min-height: 10em;
				padding: 20px;

				border: 2px #a681ce solid;
			}

			.table-message {
				width: 100%;
				line-height: 1.7em;
				text-align: center;
			}

			.table-action {
				width: 100%;
				min-height: 2em;
				background-color: #8c59c2;
				color: white;
				border: 0;
			}

			.restaurant-container {
				display: grid;
				grid-template-columns: 1fr 1fr 1fr 1fr;
				grid-gap: 10px;
				padding: 30px;

				border: 2px red solid;
			}
		</style>
		<title>
			Restaurant Manager
		</title>
	</head>
	<body>
		<div id="app">
			<x-restaurant></x-restaurant>
			<div class="form">Ima form!</div>
		</div>
		<script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
		<script>
			Vue.component('x-table', {
				props: {
					id: { type: Number, required: true },
					initialTimer: { type: Number, required: true }, //in seconds
					isOccupied: { type: Boolean, required: true },
					occupiedBy: { type: Number, required: true },
					capacity: { type: Number, required: true },
				},
				data: function () {
					return {
						timerCountdown: this.initialTimer,
						timer: undefined, //Timeout timer
						timerToDisplay: '00:00' // mm:ss
					}
				},
				created() {
					this.updateTimerToDisplay();
				},
				watch: {
					timerCountdown: {
						handler(value) {
							if (this.timerCountdown > 0) {
								this.timer = setTimeout(() => {
									this.timerCountdown--;
									this.updateTimerToDisplay();
								}, 1000);
							} else {
								this.freeTable();
							}
						},
						immediate: true // This ensures the watcher is triggered upon creation
					}
				},
				beforeDestroy () {
					this.dropTimer();
				},

				methods: {
					freeTable () {
						this.dropTimer();
						alert("Table" + this.id + " has become available");
					},
					dropTimer () {
						clearInterval(this.timer);
						this.timerToDisplay = undefined;
					},
					updateTimerToDisplay() {
						const minutes = Math.floor(this.timerCountdown / 60);
						const seconds = this.timerCountdown - minutes * 60;
						// Add '0' before number, if it less than 10;
						let fancyMinutes = ('0' + minutes).slice(-2);
						let fancySeconds = ('0' + seconds).slice(-2);
						this.timerToDisplay = fancyMinutes + ':' + fancySeconds;
					}

				},

				template: '<div v-if="isOccupied" class="table-container">' +
							'<span class="table-message">Occupied by {{occupiedBy}} <br/> (free in {{timerToDisplay}})</span>' +
							'<button class="table-action">Evict</button>' +
						'</div>' +
						'<div v-else class="table-container">' +
							'<span class="table-message">Table Available <br/> (capacity = {{capacity}})</span>' +
						'</div>'

			})

			Vue.component('x-restaurant', {
				data: function () {
					return {
						count: 0
					}
				},
				template: '<div class="restaurant-container">' +
							'<x-table :id="1" :capacity="5" :is-occupied="true" :occupied-by="3" :initial-timer="10"></x-table>' +
							'<x-table :id="2" :capacity="3" :is-occupied="true" :occupied-by="5" :initial-timer="5"></x-table>' +
						'</div>'
			})

			const app = new Vue({
				el: '#app',
				data: {

				},
				delimiters: ['{', '}'],
			});
		</script>
	</body>
</html>
